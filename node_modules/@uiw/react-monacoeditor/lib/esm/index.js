import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useImperativeHandle, useEffect, useRef, useState } from 'react';
import * as monaco from 'monaco-editor';
import { editor } from 'monaco-editor';

function noop() {}

function MonacoEditor(props, ref) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? '' : _props$theme,
      _props$language = props.language,
      language = _props$language === void 0 ? 'javascript' : _props$language,
      autoComplete = props.autoComplete,
      _props$options = props.options,
      options = _props$options === void 0 ? {} : _props$options,
      _props$editorDidMount = props.editorDidMount,
      editorDidMount = _props$editorDidMount === void 0 ? noop : _props$editorDidMount,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
      other = _objectWithoutProperties(props, ["width", "height", "value", "theme", "language", "autoComplete", "options", "editorDidMount", "onChange", "defaultValue"]);

  options.language = language || options.language;
  options.theme = theme || options.theme;

  var _useState = useState(defaultValue),
      _useState2 = _slicedToArray(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  var container = useRef(null);
  var editor = useRef();
  useImperativeHandle(ref, function () {
    return {
      container: container.current,
      editor: editor.current,
      monaco: monaco
    };
  });
  useEffect(function () {
    if (container.current) {
      editor.current = monaco.editor.create(container.current, _objectSpread({
        value: val,
        language: language
      }, options));

      if (options.theme) {
        monaco.editor.setTheme(options.theme);
      } // After initializing monaco editor


      editorDidMount(editor.current, monaco);
      editor.current.onDidChangeModelContent(function (event) {
        var valueCurrent = editor.current.getValue(); // Always refer to the latest value

        onChange(valueCurrent, event);
      });
    }
  }, []);
  useEffect(function () {
    if (value !== val && editor.current) {
      if (autoComplete) {
        var _editor$current, _editor$current2;

        if (editor !== null && editor !== void 0 && (_editor$current = editor.current) !== null && _editor$current !== void 0 && _editor$current.getModel() && editor !== null && editor !== void 0 && (_editor$current2 = editor.current) !== null && _editor$current2 !== void 0 && _editor$current2.getPosition()) {
          monaco.languages.registerCompletionItemProvider(language, {
            provideCompletionItems: function provideCompletionItems(model, position) {
              return {
                suggestions: autoComplete(model, position)
              };
            }
          });
        }
      }

      setVal(value);
      editor.current.setValue(value);
    }
  }, [value]);
  useEffect(function () {
    if (editor.current) {
      var _model = editor.current.getModel();

      if (_model) {
        monaco.editor.setModelLanguage(_model, props.language || '');
      }
    }
  }, [language]);
  useEffect(function () {
    if (editor.current) {
      var optionsRaw = editor.current.getRawOptions();
      ;
      Object.keys(optionsRaw).forEach(function (keyname) {
        var propsOpt = options[keyname];

        if (optionsRaw[keyname] !== propsOpt && propsOpt !== undefined) {
          editor.current.updateOptions(_defineProperty({}, keyname, propsOpt));
        }
      });
    }
  }, [options]);
  return /*#__PURE__*/React.createElement("div", _extends({}, other, {
    ref: container,
    style: _objectSpread(_objectSpread({}, other.style), {}, {
      width: width,
      height: height
    })
  }));
}

export default /*#__PURE__*/React.forwardRef(MonacoEditor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,