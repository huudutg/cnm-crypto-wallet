"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var monaco = _interopRequireWildcard(require("monaco-editor"));

function noop() {}

function MonacoEditor(props, ref) {
  var _props$width = props.width,
      width = _props$width === void 0 ? '100%' : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? '100%' : _props$height,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      _props$theme = props.theme,
      theme = _props$theme === void 0 ? '' : _props$theme,
      _props$language = props.language,
      language = _props$language === void 0 ? 'javascript' : _props$language,
      autoComplete = props.autoComplete,
      _props$options = props.options,
      options = _props$options === void 0 ? {} : _props$options,
      _props$editorDidMount = props.editorDidMount,
      editorDidMount = _props$editorDidMount === void 0 ? noop : _props$editorDidMount,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? noop : _props$onChange,
      _props$defaultValue = props.defaultValue,
      defaultValue = _props$defaultValue === void 0 ? '' : _props$defaultValue,
      other = (0, _objectWithoutProperties2.default)(props, ["width", "height", "value", "theme", "language", "autoComplete", "options", "editorDidMount", "onChange", "defaultValue"]);
  options.language = language || options.language;
  options.theme = theme || options.theme;

  var _useState = (0, _react.useState)(defaultValue),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      val = _useState2[0],
      setVal = _useState2[1];

  var container = (0, _react.useRef)(null);
  var editor = (0, _react.useRef)();
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      container: container.current,
      editor: editor.current,
      monaco: monaco
    };
  });
  (0, _react.useEffect)(function () {
    if (container.current) {
      editor.current = monaco.editor.create(container.current, (0, _objectSpread2.default)({
        value: val,
        language: language
      }, options));

      if (options.theme) {
        monaco.editor.setTheme(options.theme);
      } // After initializing monaco editor


      editorDidMount(editor.current, monaco);
      editor.current.onDidChangeModelContent(function (event) {
        var valueCurrent = editor.current.getValue(); // Always refer to the latest value

        onChange(valueCurrent, event);
      });
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (value !== val && editor.current) {
      if (autoComplete) {
        var _editor$current, _editor$current2;

        if (editor !== null && editor !== void 0 && (_editor$current = editor.current) !== null && _editor$current !== void 0 && _editor$current.getModel() && editor !== null && editor !== void 0 && (_editor$current2 = editor.current) !== null && _editor$current2 !== void 0 && _editor$current2.getPosition()) {
          monaco.languages.registerCompletionItemProvider(language, {
            provideCompletionItems: function provideCompletionItems(model, position) {
              return {
                suggestions: autoComplete(model, position)
              };
            }
          });
        }
      }

      setVal(value);
      editor.current.setValue(value);
    }
  }, [value]);
  (0, _react.useEffect)(function () {
    if (editor.current) {
      var _model = editor.current.getModel();

      if (_model) {
        monaco.editor.setModelLanguage(_model, props.language || '');
      }
    }
  }, [language]);
  (0, _react.useEffect)(function () {
    if (editor.current) {
      var optionsRaw = editor.current.getRawOptions();
      ;
      Object.keys(optionsRaw).forEach(function (keyname) {
        var propsOpt = options[keyname];

        if (optionsRaw[keyname] !== propsOpt && propsOpt !== undefined) {
          editor.current.updateOptions((0, _defineProperty2.default)({}, keyname, propsOpt));
        }
      });
    }
  }, [options]);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, other, {
    ref: container,
    style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, other.style), {}, {
      width: width,
      height: height
    })
  }));
}

var _default = /*#__PURE__*/_react.default.forwardRef(MonacoEditor);

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,