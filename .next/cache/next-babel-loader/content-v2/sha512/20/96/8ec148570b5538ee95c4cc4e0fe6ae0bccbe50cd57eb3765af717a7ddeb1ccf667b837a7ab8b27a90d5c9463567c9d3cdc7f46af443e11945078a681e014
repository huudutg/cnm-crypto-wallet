{"ast":null,"code":"import _regeneratorRuntime from \"/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { url } from \"src/utils/url\";\nimport { AXIOS } from \"./config\";\nimport { parseError } from \"./errors\";\n\nvar RepositoryService = /*#__PURE__*/function () {\n  function RepositoryService() {\n    _classCallCheck(this, RepositoryService);\n\n    _defineProperty(this, \"client\", AXIOS);\n  }\n\n  _createClass(RepositoryService, [{\n    key: \"listRepositories\",\n    value: function () {\n      var _listRepositories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.client.get(url.REPOS);\n\n              case 3:\n                res = _context.sent;\n                // for (const item of res.data.items) {\n                //   item.value = item.name;\n                // }\n                res.data.items.forEach(function (item) {\n                  return item.value = item.name;\n                });\n                return _context.abrupt(\"return\", {\n                  _items: res.data.items,\n                  _range: {\n                    total: 4,\n                    limit: 10,\n                    offset: 0\n                  }\n                });\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                throw parseError(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      function listRepositories(_x) {\n        return _listRepositories.apply(this, arguments);\n      }\n\n      return listRepositories;\n    }()\n  }, {\n    key: \"getRepository\",\n    value: function () {\n      var _getRepository = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req) {\n        var uri, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                uri = encodeURIComponent(req.id);\n                _context2.next = 4;\n                return this.client.get(url.REPOS + \"/\".concat(uri));\n\n              case 4:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res.data.info);\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw parseError(_context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getRepository(_x2) {\n        return _getRepository.apply(this, arguments);\n      }\n\n      return getRepository;\n    }()\n  }, {\n    key: \"createRequestRepo\",\n    value: function () {\n      var _createRequestRepo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.client.post(url.REQUEST_REPOS, req);\n\n              case 3:\n                res = _context3.sent;\n                return _context3.abrupt(\"return\", res.data);\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw parseError(_context3.t0);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n\n      function createRequestRepo(_x3) {\n        return _createRequestRepo.apply(this, arguments);\n      }\n\n      return createRequestRepo;\n    }()\n  }, {\n    key: \"ApproveRequest\",\n    value: function () {\n      var _ApproveRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.client.post(url.RPC_REPOS + \"/\".concat(req.id, \"/approve\"));\n\n              case 3:\n                res = _context4.sent;\n                return _context4.abrupt(\"return\", res === null || res === void 0 ? void 0 : res.data);\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                throw parseError(_context4.t0);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n\n      function ApproveRequest(_x4) {\n        return _ApproveRequest.apply(this, arguments);\n      }\n\n      return ApproveRequest;\n    }()\n  }, {\n    key: \"getRequest\",\n    value: function () {\n      var _getRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.client.get(url.REQUEST_REPOS + \"/\".concat(req.id));\n\n              case 3:\n                res = _context5.sent;\n                return _context5.abrupt(\"return\", res === null || res === void 0 ? void 0 : res.data.info);\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                throw parseError(_context5.t0);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n\n      function getRequest(_x5) {\n        return _getRequest.apply(this, arguments);\n      }\n\n      return getRequest;\n    }()\n  }, {\n    key: \"RejectRequest\",\n    value: function () {\n      var _RejectRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return this.client.post(url.RPC_REPOS + \"/\".concat(req.id, \"/reject\"), {\n                  reviewer_comment: req.reason\n                });\n\n              case 3:\n                res = _context6.sent;\n                return _context6.abrupt(\"return\", res === null || res === void 0 ? void 0 : res.data);\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                throw parseError(_context6.t0);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n\n      function RejectRequest(_x6) {\n        return _RejectRequest.apply(this, arguments);\n      }\n\n      return RejectRequest;\n    }()\n  }]);\n\n  return RepositoryService;\n}();\n\nvar NewRepositoryService = function NewRepositoryService() {\n  return new RepositoryService();\n};\n\n_c = NewRepositoryService;\nexport default NewRepositoryService;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRepositoryService\");","map":{"version":3,"sources":["/Users/140457/Documents/Study/CNM/cnm-crypto-wallet/src/services/api/repositories.ts"],"names":["url","AXIOS","parseError","RepositoryService","_","client","get","REPOS","res","data","items","forEach","item","value","name","_items","_range","total","limit","offset","req","uri","encodeURIComponent","id","info","post","REQUEST_REPOS","RPC_REPOS","reviewer_comment","reason","NewRepositoryService"],"mappings":";;;;;AACA,SAASA,GAAT,QAAoB,eAApB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,UAAT,QAA2B,UAA3B;;IA0FMC,iB;;;;oCACsBF,K;;;;;;wGAGxBG,C;;;;;;;;uBAGyB,KAAKC,MAAL,CAAYC,GAAZ,CAAgBN,GAAG,CAACO,KAApB,C;;;AAAjBC,gBAAAA,G;AACN;AACA;AACA;AACAA,gBAAAA,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeC,OAAf,CAAuB,UAACC,IAAD;AAAA,yBAAuBA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACE,IAAzC;AAAA,iBAAvB;iDACO;AACLC,kBAAAA,MAAM,EAAEP,GAAG,CAACC,IAAJ,CAASC,KADZ;AAELM,kBAAAA,MAAM,EAAE;AACNC,oBAAAA,KAAK,EAAE,CADD;AAENC,oBAAAA,KAAK,EAAE,EAFD;AAGNC,oBAAAA,MAAM,EAAE;AAHF;AAFH,iB;;;;;sBASDjB,UAAU,a;;;;;;;;;;;;;;;;;;;sGAKlBkB,G;;;;;;;AAGQC,gBAAAA,G,GAAMC,kBAAkB,CAACF,GAAG,CAACG,EAAL,C;;uBACP,KAAKlB,MAAL,CAAYC,GAAZ,CAAgBN,GAAG,CAACO,KAAJ,cAAgBc,GAAhB,CAAhB,C;;;AAAjBb,gBAAAA,G;kDACCA,GAAG,CAACC,IAAJ,CAASe,I;;;;;sBAEVtB,UAAU,c;;;;;;;;;;;;;;;;;;;0GAKlBkB,G;;;;;;;;uBAGoB,KAAKf,MAAL,CAAYoB,IAAZ,CAAiBzB,GAAG,CAAC0B,aAArB,EAAoCN,GAApC,C;;;AAAZZ,gBAAAA,G;kDACCA,GAAG,CAACC,I;;;;;sBAELP,UAAU,c;;;;;;;;;;;;;;;;;;;uGAIlBkB,G;;;;;;;;uBAGyB,KAAKf,MAAL,CAAYoB,IAAZ,CACrBzB,GAAG,CAAC2B,SAAJ,cAAoBP,GAAG,CAACG,EAAxB,aADqB,C;;;AAAjBf,gBAAAA,G;kDAGCA,G,aAAAA,G,uBAAAA,GAAG,CAAEC,I;;;;;sBAENP,UAAU,c;;;;;;;;;;;;;;;;;;;mGAGHkB,G;;;;;;;;uBAEU,KAAKf,MAAL,CAAYC,GAAZ,CAAgBN,GAAG,CAAC0B,aAAJ,cAAwBN,GAAG,CAACG,EAA5B,CAAhB,C;;;AAAjBf,gBAAAA,G;kDAECA,G,aAAAA,G,uBAAAA,GAAG,CAAEC,IAAL,CAAUe,I;;;;;sBAEXtB,UAAU,c;;;;;;;;;;;;;;;;;;;sGAIlBkB,G;;;;;;;;uBAGyB,KAAKf,MAAL,CAAYoB,IAAZ,CACrBzB,GAAG,CAAC2B,SAAJ,cAAoBP,GAAG,CAACG,EAAxB,YADqB,EAErB;AAAEK,kBAAAA,gBAAgB,EAAER,GAAG,CAACS;AAAxB,iBAFqB,C;;;AAAjBrB,gBAAAA,G;kDAKCA,G,aAAAA,G,uBAAAA,GAAG,CAAEC,I;;;;;sBAENP,UAAU,c;;;;;;;;;;;;;;;;;;;;;AAKtB,IAAM4B,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAA0B,IAAI3B,iBAAJ,EAA1B;AAAA,CAA7B;;KAAM2B,oB;AAEN,eAAeA,oBAAf","sourcesContent":["import { Metadata } from \"src/utils/types\";\nimport { url } from \"src/utils/url\";\nimport { AXIOS } from \"./config\";\nimport { parseError } from \"./errors\";\n\nexport type Repository = {\n  readonly id: string;\n  readonly name: string;\n  readonly description?: string;\n  readonly state?: string;\n  readonly parent?: string;\n  readonly created_at: string;\n  readonly updated_at: string;\n  value?: string;\n  permissions?: any;\n  readonly reviewer_comment?: string;\n  // readonly inheriting?: {\n  //   id: string;\n  //   name: string;\n  // };\n  // readonly branches?: Array<{\n  //   id: string;\n  //   name: string;\n  //   revision: string;\n  // }>;\n};\n\nexport type RepoRequest = {\n  readonly repo: string;\n  readonly reason: string;\n  readonly description?: string;\n  readonly parent?: string;\n  readonly reviewer?: string;\n  readonly request_user?: string;\n  readonly status?: \"OPEN\" | \"REJECTED\" | \"APPROVED\";\n  readonly created_at?: string;\n  readonly updated_at?: string;\n  id?: string;\n  readonly inheriting?: {\n    id: string;\n    name: string;\n  };\n  readonly branches?: Array<{\n    id: string;\n    name: string;\n    revision: string;\n  }>;\n};\n\nexport type ListRepositoriesRequest = {};\nexport type ListRepositoriesResponse = {\n  _items: Repository[];\n  _range: Metadata;\n};\nexport type GetRepositoryRequest = {\n  id: string | string[] | undefined;\n};\nexport type GetRepositoryResponse = Repository;\n\nexport type GetLogsRepositoryRequest = {};\nexport type GetLogsRepositoryResponse = any;\nexport type RequestRepoRequest = {\n  readonly repo: string;\n  readonly reason?: string;\n};\nexport type createRequestRepoResponse = { code: number; id: string };\nexport type ApproveRequestResponse = { code: number };\ntype ApproveRequestRequest = {\n  id: string | string[] | undefined;\n};\n\nexport type GetRequestRequest = {\n  id: string | string[] | undefined;\n};\nexport type GetRequestResponse = RepoRequest;\nexport type RejectRequestResponse = { code: number };\ntype RejectRequestRequest = {\n  id: string | string[] | undefined;\n  reason: string;\n};\ninterface IRepositoryService {\n  listRepositories(\n    _: ListRepositoriesRequest\n  ): Promise<ListRepositoriesResponse>;\n  getRepository(req: GetRepositoryRequest): Promise<GetRepositoryResponse>;\n  createRequestRepo(\n    req: RequestRepoRequest\n  ): Promise<createRequestRepoResponse>;\n  ApproveRequest(req: ApproveRequestRequest): Promise<ApproveRequestResponse>;\n  getRequest(_: GetRequestRequest): Promise<GetRequestResponse>;\n  RejectRequest(req: RejectRequestRequest): Promise<RejectRequestResponse>;\n}\n\nclass RepositoryService implements IRepositoryService {\n  private readonly client = AXIOS;\n\n  async listRepositories(\n    _: ListRepositoriesRequest\n  ): Promise<ListRepositoriesResponse> {\n    try {\n      const res: any = await this.client.get(url.REPOS);\n      // for (const item of res.data.items) {\n      //   item.value = item.name;\n      // }\n      res.data.items.forEach((item: Repository) => (item.value = item.name));\n      return {\n        _items: res.data.items,\n        _range: {\n          total: 4,\n          limit: 10,\n          offset: 0,\n        },\n      };\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n\n  async getRepository(\n    req: GetRepositoryRequest\n  ): Promise<GetRepositoryResponse> {\n    try {\n      const uri = encodeURIComponent(req.id as string);\n      const res: any = await this.client.get(url.REPOS + `/${uri}`);\n      return res.data.info as GetRepositoryResponse;\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n\n  async createRequestRepo(\n    req: RequestRepoRequest\n  ): Promise<createRequestRepoResponse> {\n    try {\n      const res = await this.client.post(url.REQUEST_REPOS, req);\n      return res.data as createRequestRepoResponse;\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n  async ApproveRequest(\n    req: ApproveRequestRequest\n  ): Promise<ApproveRequestResponse> {\n    try {\n      const res: any = await this.client.post(\n        url.RPC_REPOS + `/${req.id}/approve`\n      );\n      return res?.data as ApproveRequestResponse;\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n  async getRequest(req: GetRequestRequest): Promise<GetRequestResponse> {\n    try {\n      const res: any = await this.client.get(url.REQUEST_REPOS + `/${req.id}`);\n      // console.log(\"res\", res);, res);\n      return res?.data.info as GetRequestResponse;\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n  async RejectRequest(\n    req: RejectRequestRequest\n  ): Promise<RejectRequestResponse> {\n    try {\n      const res: any = await this.client.post(\n        url.RPC_REPOS + `/${req.id}/reject`,\n        { reviewer_comment: req.reason }\n      );\n      // console.log(\"res\", res);, res);\n      return res?.data as RejectRequestResponse;\n    } catch (err) {\n      throw parseError(err);\n    }\n  }\n}\n\nconst NewRepositoryService = (): IRepositoryService => new RepositoryService();\n\nexport default NewRepositoryService;\n"]},"metadata":{},"sourceType":"module"}